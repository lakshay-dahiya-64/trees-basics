#include<iostream>
#include <queue>
using namespace std;


class node{
public:
int data;
node* left;
node* right;

node(int data){
this->data=data;
this->left=NULL;
this->right=NULL;
}
};

//dryrun this code must in order to understand this easily

void treetraversal(node* root){
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        node* temp=q.front();
        q.pop();
        if(temp==NULL){
            cout<<endl;
          if(!q.empty()){
            q.push(NULL);
          }}
        else{
         cout<<temp->data<<" ";
         if(temp->left){
            q.push(temp->left);
         }
         if(temp->right){
            q.push(temp->right);
         }}
        
    }
}

//dryrun this code in order to understand this code easily

node* createtree(){
    int data;
    cin >> data;
    
    if(data==-1){
        return NULL;
    }
    
    node* root=new node(data);
    cout<<"enter the data to be entered in the left of node "<<data<<endl;
    root->left=createtree();
     cout<<"enter the data to be entered in the right of node "<<data<<endl;
    root->right=createtree();

    return root;
}

void inordertraversal(node* root){
if(root==NULL){
    return;
}
inordertraversal(root->left);
cout<<root->data<<" ";
inordertraversal(root->right);
}

int findhieght(node* root){
    if(root==NULL){
        return 0;
    }
    int left=findhieght(root->left);
    int right=findhieght(root->right);
    int ans=max(left,right)+1;
    return ans;
}

int diameter(node* root){
    if(root==NULL){
        return 0;
    }
    else{

    
    int opt1=diameter(root->left);
    int opt2=diameter(root->right);
    int opt3=findhieght(root->left)+findhieght(root->right);
    int ans= max(opt3,max(opt1,opt2));
        return ans;
        }
}

int main(){
   node* root=NULL;
   root=createtree();
   inordertraversal(root);
   cout<<endl;
   treetraversal(root);
   int hieght=findhieght(root);
   cout<<hieght<<endl;
   int diam=diameter(root);
   cout<<diam<<endl;
    return 0;
}
